{
  
    
        "post0": {
            "title": "Unit 3 Section 7",
            "content": "Unit 3 Section 7 . Learning Objectives . Write nested conditional statements Determine the result of nested conditional statement . Vocab . Nested conditional: A conditional inside of a conditional . Nested Conditionals . Nested conditionals are often used in algorithms in order to print specific data or run certain tasks. . We can use flowcharts to help display an easy to understand diagram of what we want a code segment to do. .",
            "url": "https://muffinman1287.github.io/BARN//BARN/csp/2022/11/28/u3-s7.html",
            "relUrl": "/csp/2022/11/28/u3-s7.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Unit 3 Sections 6",
            "content": "Unit 3 Section 6 . Learning Objectives . Write conditional statements | Determine the result of conditional statements | . Vocab . ==Algorithm:== Finite set of instructions that accomplish a specific task . Conditional Statements . Conditional statements allow the code to act based on multiple conditions, such as user input or stored data. We can use conditionals in algorithms in order to receive different outputs from a set of code, and help achieve the general purpose of the algorithm. . Categories . Two broad types of conditional statements are if statements and if-else statements . if statement: will go through certain statements if the if expression is true | if-else statement: will go through a statement no matter what, but the statement which is run depends on the if expression is true or false | . number1 = 28 number2 = 43 def lessthan30(num): # Example of if statement if num &lt; 30: # If this condition is true(variable is less than 30) print(num) # Then the value of the variable will be printed lessthan30(number1) # The if statement is true, so it will print the value of 28 lessthan30(number2) # The if statement is false, nothing will be printed. . 28 . number1 = 28 number2 = 43 def lessthan30(num): # Example of if statement if num &lt; 30: # If this condition is true(variable is less than 30) print(num) # Then the value of the variable will be printed # Adding else statement else: # If the if statement is false, the algorithm will go to this statement print(&quot;The value is too large!&quot;) lessthan30(number1) # The if statement is true, so it will print the value of 28 lessthan30(number2) # The if statement is false, so the else function will run and state the value is too large . 28 The value is too large! . Using conditionals is very helpful for going through a list of data. .",
            "url": "https://muffinman1287.github.io/BARN//BARN/csp/2022/11/28/u3-s6.html",
            "relUrl": "/csp/2022/11/28/u3-s6.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Unit 3 Sections 5",
            "content": "Unit 3 Section 5 . Learning Objectives . Write expressions with logical operators | Evaluate expressions that use logical operators | . Vocab . Boolean binary variable with only two possible values, &quot;true&quot; or &quot;false&quot; . Relational Operators . There are multiple operators which are used to evaluate 2 variables. In pseudocode the relational operators are =, &gt;, &lt;, ≠, ≥, and ≤. Other languages use different formats to represent these operators. For example, Python uses != instead of ≠. These operators help determine the boolean value of a statement. . print(30 &gt; 19) # Will output true, since is 30 is larger than 19 # Using variables and strings a = &quot;Yes&quot; b = &quot;No&quot; print(a == b) # Will output false, not the same # Renaming b b = &quot;Yes&quot; print(a == b) # Will output true, since both variables match . True False True . Relational Operators Table Value 1 and Value 2(And operator) Value 1 Value 2 Result . True | True | True | . True | False | False | . False | True | False | . False | False | False | . Value 1 or Value 2(Or operator) Value 1 Value 2 Result . True | True | True | . True | False | True | . False | True | True | . False | False | False | . Not operator Not Value Result . Not | True | False | . Not | False | True | . . Logical Operators . Logical operators allow for boolean values to be evaluated. Pseudocode uses the logical operators NOT, AND, and OR. Javascript uses the same logic, but uses different ways to represent the operators: &amp;&amp;(and), | |(or), |(not). . print(1 == 1 and 10 &gt;= 0) # Returns true because both statements are true cookies = 25 brownies = 30 print(&quot;There is enough dessert&quot;) # First condition is false, but second condition is true print(cookies == 50 or cookies + brownies &gt;= 35) # Ends up returning true since at least one condition is true # The expression &quot;Blue&quot; != &quot;Green&quot; is false print(not &quot;Blue&quot; != &quot;Green&quot;) # Not operator changes statement to not false, printing true . True There is enough dessert True False . Operators and booleans can be very useful, allowing a program to create an algorithm based on user inputs items stored in list. For example, operators can be used to perform multiple operations on lists. .",
            "url": "https://muffinman1287.github.io/BARN//BARN/csp/2022/11/28/u3-s5.html",
            "relUrl": "/csp/2022/11/28/u3-s5.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Unit 3 Sections 5-7 Hacks",
            "content": "For hacks, make a copy of this notebook and answer the questions or complete the code, as described in comments. Additionally, blog about any missed questions, or what you learned from this lesson. . 3.5 Hacks . Binary Practice . AP Prep . Using Python . # Practice with these statements print(20 == 20) # How can you change the operator to print a value of False? x = 30 y = 20 z = 10 print(x &gt; y + z) # How can this return true by only manipulating the operator? # Manipulate the variables x, y, and z to make the below statement return true print(x == z) . 3.6 Hacks . AP Prep . Using Python . animals = [&quot;lion&quot;, &quot;tiger&quot;, &quot;wildebeest&quot;, &quot;shark&quot;, &quot;jellyfish&quot;, &quot;blobfish&quot;, &quot;raven&quot;] for i in animals: if i == &quot;shark&quot;: # What boolean value does this statement cause? print(&quot;Fun Fact: The smallest shark is the dwarf lantern shark, and it is small enough to hold in your hand!&quot;) else: print(i) # Practice # Using only one more if statement, alter the code to print out a statement saying if an animal lives in the desert, based on booleans . 3.7 Hacks . Exercise 1 . Create dictionaries for multiple food items, with the listed specifications Chicken Alfredo, Meat: Chicken, Time to Prepare: 60 minutes | Cheese Quesadilla, Meat: None, Time to Prepare: 10 minutes | Beef Wellington, Meat: Beef, Time to Prepare: 150 minutes | . | Used nested conditionals, determine which meal you can cook, given that a) you have no meat at home, and b) you only have 30 minutes to make the meal | . .",
            "url": "https://muffinman1287.github.io/BARN//BARN/csp/2022/11/28/assignment.html",
            "relUrl": "/csp/2022/11/28/assignment.html",
            "date": " • Nov 28, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "AP CSP Lesson Planning",
            "content": "Our Section . We will be planning a lesson for Unit 3, Sections 5 - 7. This includes boolean expressions, conditionals, and nested conditionals. . 3.5 Boolean Expressions . 3.6 Conditionals . 3.7 Nested Conditionals .",
            "url": "https://muffinman1287.github.io/BARN//BARN/2022/11/17/lesson-plan.html",
            "relUrl": "/2022/11/17/lesson-plan.html",
            "date": " • Nov 17, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is the CSP group page for Ben, Luke, Nico, and Arnav. .",
          "url": "https://muffinman1287.github.io/BARN//BARN/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://muffinman1287.github.io/BARN//BARN/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}